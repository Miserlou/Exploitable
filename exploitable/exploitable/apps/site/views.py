from django.http import HttpResponseRedirect, HttpResponseNotFound
from django.http import Http404
from django.conf import settings
from django.contrib.auth.decorators import login_required
from django.shortcuts import get_object_or_404, render_to_response, Http404, HttpResponse
from django.template import loader, RequestContext
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_POST 
from django.views.decorators.http import require_http_methods
from django.contrib.auth.models import User
from django.contrib.admin.views.decorators import staff_member_required
from django.db.models import Q
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.views.generic.base import TemplateView
from django.db import connection, transaction

from exploitable.apps.accounts.models import BankProfile

def home(request):
    return render_to_response('index.html', {
        },
        context_instance=RequestContext(request))

def branch(request):

    try:
        term = request.GET['search']
    except Exception, e:
        term = ''

    return render_to_response('branch.html', {
            'term': term,
            'term_no_quotes': term.replace('\'', ''),
            'term_no_quotes_at_all': term.replace('\'', '').replace('"', ''),
            'results': "results",
        },
        context_instance=RequestContext(request))

@login_required
def dash(request):

    recent_users = BankProfile.objects.all()

    return render_to_response('dash.html', {
            'recent_users': recent_users,
        },
        context_instance=RequestContext(request))

@login_required
@csrf_exempt
def edit_profile(request):

    if request.POST:
        request.user.get_profile().bio = request.POST['bio']
        request.user.get_profile().save()

    return render_to_response('edit_profile.html', {
        },
        context_instance=RequestContext(request))

@login_required
@csrf_exempt
def transfer(request):

    if request.POST:
        request.user.get_profile().save()

    return render_to_response('transfer.html', {
        },
        context_instance=RequestContext(request))

@login_required
@csrf_exempt
def deposit(request):

    error = None
    if request.POST:

        value = request.POST['deposit']

        # sqlite> .mode column
        # sqlite> .headers on
        # sqlite> SELECT * FROM accounts_bankprofile;
        # id          mugshot     privacy     user_id     bio         balance   
        # ----------  ----------  ----------  ----------  ----------  ----------
        # 1                       registered  3                       5         
        # 2                       registered  4                       5         
        # 3                       registered  5                       5      
        # UPDATE accounts_bankprofile SET BALANCE = 5 WHERE id=1;

        try:
            cursor = connection.cursor()
            print "UPDATE accounts_bankprofile SET BALANCE=BALANCE+{0} WHERE id={1}".format(value, request.user.get_profile().id)
            cursor.execute("UPDATE accounts_bankprofile SET BALANCE=BALANCE+{0} WHERE id={1}".format(value, request.user.get_profile().id))
            transaction.commit_unless_managed()
        except Exception, e:
            error = e

    return render_to_response('deposit.html', {
            'error': error
        },
        context_instance=RequestContext(request))
